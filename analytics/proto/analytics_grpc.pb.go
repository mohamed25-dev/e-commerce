// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/analytics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AnalticsService_UpdateAnalytics_FullMethodName            = "/proto.AnalticsService/UpdateAnalytics"
	AnalticsService_CreateAnalyticsTransaction_FullMethodName = "/proto.AnalticsService/CreateAnalyticsTransaction"
	AnalticsService_StreamTotalSales_FullMethodName           = "/proto.AnalticsService/StreamTotalSales"
	AnalticsService_StreamTopCustomers_FullMethodName         = "/proto.AnalticsService/StreamTopCustomers"
	AnalticsService_StreamSalesByProduct_FullMethodName       = "/proto.AnalticsService/StreamSalesByProduct"
)

// AnalticsServiceClient is the client API for AnalticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalticsServiceClient interface {
	UpdateAnalytics(ctx context.Context, in *UpdateAnalyticsRequest, opts ...grpc.CallOption) (*UpdateAnalyticsResponse, error)
	CreateAnalyticsTransaction(ctx context.Context, in *CreateAnalyticsTransactionRequest, opts ...grpc.CallOption) (*CreateAnaltyicsTransactionResponse, error)
	StreamTotalSales(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (AnalticsService_StreamTotalSalesClient, error)
	StreamTopCustomers(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (AnalticsService_StreamTopCustomersClient, error)
	StreamSalesByProduct(ctx context.Context, in *StreamSalesByProductRequest, opts ...grpc.CallOption) (AnalticsService_StreamSalesByProductClient, error)
}

type analticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalticsServiceClient(cc grpc.ClientConnInterface) AnalticsServiceClient {
	return &analticsServiceClient{cc}
}

func (c *analticsServiceClient) UpdateAnalytics(ctx context.Context, in *UpdateAnalyticsRequest, opts ...grpc.CallOption) (*UpdateAnalyticsResponse, error) {
	out := new(UpdateAnalyticsResponse)
	err := c.cc.Invoke(ctx, AnalticsService_UpdateAnalytics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analticsServiceClient) CreateAnalyticsTransaction(ctx context.Context, in *CreateAnalyticsTransactionRequest, opts ...grpc.CallOption) (*CreateAnaltyicsTransactionResponse, error) {
	out := new(CreateAnaltyicsTransactionResponse)
	err := c.cc.Invoke(ctx, AnalticsService_CreateAnalyticsTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analticsServiceClient) StreamTotalSales(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (AnalticsService_StreamTotalSalesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnalticsService_ServiceDesc.Streams[0], AnalticsService_StreamTotalSales_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &analticsServiceStreamTotalSalesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnalticsService_StreamTotalSalesClient interface {
	Recv() (*StreamTotalSalesResponse, error)
	grpc.ClientStream
}

type analticsServiceStreamTotalSalesClient struct {
	grpc.ClientStream
}

func (x *analticsServiceStreamTotalSalesClient) Recv() (*StreamTotalSalesResponse, error) {
	m := new(StreamTotalSalesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *analticsServiceClient) StreamTopCustomers(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (AnalticsService_StreamTopCustomersClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnalticsService_ServiceDesc.Streams[1], AnalticsService_StreamTopCustomers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &analticsServiceStreamTopCustomersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnalticsService_StreamTopCustomersClient interface {
	Recv() (*StreamTopCustomersResponse, error)
	grpc.ClientStream
}

type analticsServiceStreamTopCustomersClient struct {
	grpc.ClientStream
}

func (x *analticsServiceStreamTopCustomersClient) Recv() (*StreamTopCustomersResponse, error) {
	m := new(StreamTopCustomersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *analticsServiceClient) StreamSalesByProduct(ctx context.Context, in *StreamSalesByProductRequest, opts ...grpc.CallOption) (AnalticsService_StreamSalesByProductClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnalticsService_ServiceDesc.Streams[2], AnalticsService_StreamSalesByProduct_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &analticsServiceStreamSalesByProductClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnalticsService_StreamSalesByProductClient interface {
	Recv() (*StreamSalesByProductResponse, error)
	grpc.ClientStream
}

type analticsServiceStreamSalesByProductClient struct {
	grpc.ClientStream
}

func (x *analticsServiceStreamSalesByProductClient) Recv() (*StreamSalesByProductResponse, error) {
	m := new(StreamSalesByProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalticsServiceServer is the server API for AnalticsService service.
// All implementations must embed UnimplementedAnalticsServiceServer
// for forward compatibility
type AnalticsServiceServer interface {
	UpdateAnalytics(context.Context, *UpdateAnalyticsRequest) (*UpdateAnalyticsResponse, error)
	CreateAnalyticsTransaction(context.Context, *CreateAnalyticsTransactionRequest) (*CreateAnaltyicsTransactionResponse, error)
	StreamTotalSales(*EmptyRequest, AnalticsService_StreamTotalSalesServer) error
	StreamTopCustomers(*EmptyRequest, AnalticsService_StreamTopCustomersServer) error
	StreamSalesByProduct(*StreamSalesByProductRequest, AnalticsService_StreamSalesByProductServer) error
	mustEmbedUnimplementedAnalticsServiceServer()
}

// UnimplementedAnalticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnalticsServiceServer struct {
}

func (UnimplementedAnalticsServiceServer) UpdateAnalytics(context.Context, *UpdateAnalyticsRequest) (*UpdateAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnalytics not implemented")
}
func (UnimplementedAnalticsServiceServer) CreateAnalyticsTransaction(context.Context, *CreateAnalyticsTransactionRequest) (*CreateAnaltyicsTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnalyticsTransaction not implemented")
}
func (UnimplementedAnalticsServiceServer) StreamTotalSales(*EmptyRequest, AnalticsService_StreamTotalSalesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTotalSales not implemented")
}
func (UnimplementedAnalticsServiceServer) StreamTopCustomers(*EmptyRequest, AnalticsService_StreamTopCustomersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTopCustomers not implemented")
}
func (UnimplementedAnalticsServiceServer) StreamSalesByProduct(*StreamSalesByProductRequest, AnalticsService_StreamSalesByProductServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSalesByProduct not implemented")
}
func (UnimplementedAnalticsServiceServer) mustEmbedUnimplementedAnalticsServiceServer() {}

// UnsafeAnalticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalticsServiceServer will
// result in compilation errors.
type UnsafeAnalticsServiceServer interface {
	mustEmbedUnimplementedAnalticsServiceServer()
}

func RegisterAnalticsServiceServer(s grpc.ServiceRegistrar, srv AnalticsServiceServer) {
	s.RegisterService(&AnalticsService_ServiceDesc, srv)
}

func _AnalticsService_UpdateAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalticsServiceServer).UpdateAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalticsService_UpdateAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalticsServiceServer).UpdateAnalytics(ctx, req.(*UpdateAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalticsService_CreateAnalyticsTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnalyticsTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalticsServiceServer).CreateAnalyticsTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalticsService_CreateAnalyticsTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalticsServiceServer).CreateAnalyticsTransaction(ctx, req.(*CreateAnalyticsTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalticsService_StreamTotalSales_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnalticsServiceServer).StreamTotalSales(m, &analticsServiceStreamTotalSalesServer{stream})
}

type AnalticsService_StreamTotalSalesServer interface {
	Send(*StreamTotalSalesResponse) error
	grpc.ServerStream
}

type analticsServiceStreamTotalSalesServer struct {
	grpc.ServerStream
}

func (x *analticsServiceStreamTotalSalesServer) Send(m *StreamTotalSalesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AnalticsService_StreamTopCustomers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnalticsServiceServer).StreamTopCustomers(m, &analticsServiceStreamTopCustomersServer{stream})
}

type AnalticsService_StreamTopCustomersServer interface {
	Send(*StreamTopCustomersResponse) error
	grpc.ServerStream
}

type analticsServiceStreamTopCustomersServer struct {
	grpc.ServerStream
}

func (x *analticsServiceStreamTopCustomersServer) Send(m *StreamTopCustomersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AnalticsService_StreamSalesByProduct_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSalesByProductRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnalticsServiceServer).StreamSalesByProduct(m, &analticsServiceStreamSalesByProductServer{stream})
}

type AnalticsService_StreamSalesByProductServer interface {
	Send(*StreamSalesByProductResponse) error
	grpc.ServerStream
}

type analticsServiceStreamSalesByProductServer struct {
	grpc.ServerStream
}

func (x *analticsServiceStreamSalesByProductServer) Send(m *StreamSalesByProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AnalticsService_ServiceDesc is the grpc.ServiceDesc for AnalticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AnalticsService",
	HandlerType: (*AnalticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAnalytics",
			Handler:    _AnalticsService_UpdateAnalytics_Handler,
		},
		{
			MethodName: "CreateAnalyticsTransaction",
			Handler:    _AnalticsService_CreateAnalyticsTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTotalSales",
			Handler:       _AnalticsService_StreamTotalSales_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTopCustomers",
			Handler:       _AnalticsService_StreamTopCustomers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamSalesByProduct",
			Handler:       _AnalticsService_StreamSalesByProduct_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/analytics.proto",
}
