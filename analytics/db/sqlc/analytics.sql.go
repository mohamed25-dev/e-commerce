// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: analytics.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnalytic = `-- name: CreateAnalytic :one
INSERT INTO analytics (
    id,
    top_customers,
    total_sales
) VALUES (
  $1, $2, $3
) RETURNING id, top_customers, total_sales, created_at
`

type CreateAnalyticParams struct {
	ID           string
	TopCustomers int32
	TotalSales   pgtype.Numeric
}

func (q *Queries) CreateAnalytic(ctx context.Context, arg CreateAnalyticParams) (Analytic, error) {
	row := q.db.QueryRow(ctx, createAnalytic, arg.ID, arg.TopCustomers, arg.TotalSales)
	var i Analytic
	err := row.Scan(
		&i.ID,
		&i.TopCustomers,
		&i.TotalSales,
		&i.CreatedAt,
	)
	return i, err
}

const getRecentAnalytic = `-- name: GetRecentAnalytic :one
SELECT id, top_customers, total_sales, created_at FROM analytics ORDER BY created_at DESC LIMIT 1
`

func (q *Queries) GetRecentAnalytic(ctx context.Context) (Analytic, error) {
	row := q.db.QueryRow(ctx, getRecentAnalytic)
	var i Analytic
	err := row.Scan(
		&i.ID,
		&i.TopCustomers,
		&i.TotalSales,
		&i.CreatedAt,
	)
	return i, err
}
