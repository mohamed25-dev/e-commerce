// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: transactions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    id,
    customer_id,
    customer_name,
    product_id,
    product_name,
    quantity,
    total_price
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, customer_id, customer_name, product_id, product_name, quantity, total_price, created_at
`

type CreateTransactionParams struct {
	ID           string
	CustomerID   string
	CustomerName string
	ProductID    string
	ProductName  string
	Quantity     int32
	TotalPrice   pgtype.Numeric
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.ID,
		arg.CustomerID,
		arg.CustomerName,
		arg.ProductID,
		arg.ProductName,
		arg.Quantity,
		arg.TotalPrice,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.CustomerName,
		&i.ProductID,
		&i.ProductName,
		&i.Quantity,
		&i.TotalPrice,
		&i.CreatedAt,
	)
	return i, err
}

const getTotalSales = `-- name: GetTotalSales :one
SELECT 
	COUNT(id) as total_transactions,
	SUM(total_price) as total_price,
	SUM(quantity) as total_quantity
FROM transactions
`

type GetTotalSalesRow struct {
	TotalTransactions int64
	TotalPrice        pgtype.Numeric
	TotalQuantity     int64
}

func (q *Queries) GetTotalSales(ctx context.Context) (GetTotalSalesRow, error) {
	row := q.db.QueryRow(ctx, getTotalSales)
	var i GetTotalSalesRow
	err := row.Scan(&i.TotalTransactions, &i.TotalPrice, &i.TotalQuantity)
	return i, err
}

const getTotalSalesByProductId = `-- name: GetTotalSalesByProductId :one
SELECT 
  product_id,
  product_name,
	COUNT(id) as total_transactions,
	SUM(total_price) as total_price,
	SUM(quantity) as total_quantity
FROM transactions
WHERE product_id = $1
GROUP BY product_id, product_name
`

type GetTotalSalesByProductIdRow struct {
	ProductID         string
	ProductName       string
	TotalTransactions int64
	TotalPrice        pgtype.Numeric
	TotalQuantity     int64
}

func (q *Queries) GetTotalSalesByProductId(ctx context.Context, productID string) (GetTotalSalesByProductIdRow, error) {
	row := q.db.QueryRow(ctx, getTotalSalesByProductId, productID)
	var i GetTotalSalesByProductIdRow
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.TotalTransactions,
		&i.TotalPrice,
		&i.TotalQuantity,
	)
	return i, err
}

const getTransactionById = `-- name: GetTransactionById :one
SELECT id, customer_id, customer_name, product_id, product_name, quantity, total_price, created_at FROM transactions WHERE id = $1
`

func (q *Queries) GetTransactionById(ctx context.Context, id string) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionById, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.CustomerName,
		&i.ProductID,
		&i.ProductName,
		&i.Quantity,
		&i.TotalPrice,
		&i.CreatedAt,
	)
	return i, err
}
